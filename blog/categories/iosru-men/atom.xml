<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS入门 | 大钟威武]]></title>
  <link href="http://Seanli2013.github.io/blog/categories/iosru-men/atom.xml" rel="self"/>
  <link href="http://Seanli2013.github.io/"/>
  <updated>2013-11-21T22:27:37+08:00</updated>
  <id>http://Seanli2013.github.io/</id>
  <author>
    <name><![CDATA[Xiang LI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过代码调用Storyboard中的scene —— Call storyboard scene programmatically]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/11/21/call-storyboard-scene-programmatically/"/>
    <updated>2013-11-21T20:26:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/11/21/call-storyboard-scene-programmatically</id>
    <content type="html"><![CDATA[<p>通过Storyboard搭建app框架，以及设计和实现一些view controller和view，是非常方便和高效的。</p>

<p>有时，同样一个scene(i.e. view controller)，除了在Storyboard上通过segue达到以外，还需要在代码的某个地方，让它展现出来。</p>

<p>如何在代码中，调用一个已经在storyboard中设计好的scene呢？代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">storyboardName</span> <span class="o">=</span> <span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">MainStoryboard_iPhone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">viewControllerID</span> <span class="o">=</span> <span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ViewID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="n">UIStoryboard</span> <span class="o">*</span> <span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIStoryboard</span> <span class="nl">storyboardWithName:</span><span class="n">storyboardName</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">MyViewController</span> <span class="o">*</span> <span class="n">controller</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyViewController</span> <span class="o">*</span><span class="p">)[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="n">viewControllerID</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注：代码段来自<a href="http://stackoverflow.com/questions/10522957/call-storyboard-scene-programmatically-without-needing-segue">Call storyboard scene programmatically (without needing segue)?</a></p>

<h5>有两个注意的地方：</h5>

<ol>
<li>上面代码中的storyboardName不要包括".storyboard"后缀。即，如果你的Storyboard文档叫做“Main.storyboard”，那么storyboardName应该叫@&ldquo;Main&rdquo;</li>
<li>注意：在Storyboard中，先给你的viewController加上ID，添加的地方如下图所示：在Indentity中的Storyboard ID。通过这个viewControllerID（图中的例子就是@&ldquo;UserGuide"），在代码中找到这个vc。</li>
</ol>


<p><img src="http://bigbelldev.com/images/blogs/storyboardID.png" alt="storyboardID" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSUserDefault 常用功能 检测应用（或app的某个版本）第一次运行 或 记录用户设定的属性”]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/11/20/nsuserdefault-detect-app-first-run-and-propty-settings/"/>
    <updated>2013-11-20T16:36:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/11/20/nsuserdefault-detect-app-first-run-and-propty-settings</id>
    <content type="html"><![CDATA[<p>NSUserDefault，从名称也可看出，一般用来记录用户的设置的。这里介绍两种常用场景：<strong>检测应用（或app的某个版本）第一次运行</strong> 和 <strong>记录用户设定的属性</strong>。</p>

<h3>原理</h3>

<p>几句话说下我的理解：</p>

<ol>
<li>NSUserDefault使用方法standardUserDefaults得到全局的一个<a href="http://bigbelldev.com/blog/2013/07/25/singleton/">单例</a></li>
<li>在这个单例是个dictionary，即通过key-object来存、取信息</li>
<li>信息会存在plist文件中，你不删它，它就一直存在</li>
</ol>


<h3>检测app第一次运行</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 以下这段代码，检查是否app的这个版本是否是第一次运行</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">bundleVersion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCFBundleVersionKey</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">appFirstStartOfVersionKey</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;first_start_%@&quot;</span><span class="p">,</span> <span class="n">bundleVersion</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">alreadyStartedOnVersion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="n">appFirstStartOfVersionKey</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">alreadyStartedOnVersion</span> <span class="o">||</span> <span class="p">[</span><span class="n">alreadyStartedOnVersion</span> <span class="n">boolValue</span><span class="p">]</span> <span class="o">==</span> <span class="n">NO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">versionFirstStart</span><span class="p">];</span><span class="c1">// app的bundleVersion这个版本第一次运行，你希望这时做点儿什么</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">appFirstStartOfVersionKey</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>每次启动app时候，调用这段代码。检查一个叫做first_start_加版本号这么个key，对应的NSNumber类型Object，是否存在，或是否是0（NO），如果不存在，或者是0（NO），那么是这个版本的第一次运行，这时做你想在app第一次运行时做的事儿，比如[self versionFirstStart]，之后在plist中添加这个key对应的NSNumber类型object，设置成1（YES）。这样，以后app只要未改变版本，启动时就再也不会执行[self versionFirstStart]了。</p>

<p><a href="http://stackoverflow.com/questions/7758775/detecting-the-first-ever-run-of-an-app/7758850#7758850">参见stackoverflow</a></p>

<p>P.S. 虽然我并未更改这段代码进行更多尝试，但肯定不一定非要NSNumber这个类型，只要plist能存储和读取的类型就可以。</p>

<h3>记录用户设定的属性</h3>

<p>想设定一个属性，你给这个属性起个独有的key，比如叫做@&ldquo;your property key"。</p>

<p>设置属性：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">off</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">forKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your</span> <span class="n">property</span> <span class="n">key</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>读取和判断属性：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">([[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your</span> <span class="n">property</span> <span class="n">key</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="nl">isEqualToString:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">off</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>更多你要了解的NSUserDefault</h3>

<h5>1. 可存储的类型</h5>

<p>NSUserDefault中存储的object的格式只能是以下列表中的类型，这是plist存储方式决定的。</p>

<p><code>
array
dictionary
data
date
number - integer
number - floating point
Boolean
</code>
了解更多，可查阅<a href="https://developer.apple.com/library/mac/documentation/cocoa/Conceptual/PropertyLists/Introduction/Introduction.html#//apple_ref/doc/uid/10000048i">Property List Programming Guide</a></p>

<h5>2. 自动存储</h5>

<p>使用NSUserDefault，默认是自动存储的，即你修改完之后，ios自动找个时候，同步（synchronize）一下内存和plist。</p>

<p>手动存储可直接调用synchronize方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>3. 查看目前NSUserDefaults standardUserDefaults中的内容</h5>

<p>查看全部dict内容</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="err">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">dictionaryRepresentation</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>当然，也可以查看全部的key</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="err">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">dictionaryRepresentation</span><span class="p">]</span> <span class="n">allKeys</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS ARC入门]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/10/28/ios-arc/"/>
    <updated>2013-10-28T20:04:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/10/28/ios-arc</id>
    <content type="html"><![CDATA[<p>现在，iOS系统已经发展到iOS7，而iOS5时引入的ARC技术早已成为主流了。所以iOS新手们对ARC技术已经习以为常了吧，对之前的手工内存管理可能完全不了解，因为基本用不到。ARC又是如此简单，貌似也没有什么必须学习的。但了解一下ARC的原理原则还是必须的——因为了解技术的原理可以更好地对技术进行应用嘛。</p>

<p>本文算是阅读
<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">Beginning ARC in iOS 5 Tutorial Part 1</a>
（翻译在
<a href="http://www.raywenderlich.com/zh-hans/20855/ios-5-arc-%E5%85%A5%E9%97%A8-13">iOS 5 ARC 入门 (1/3)</a>
翻译的同学很有爱也很辛苦，但有些地方有错误，所以读原文会比较好。）</p>

<h2>ARC简介</h2>

<p>ARC，Automatic Reference Counting，在iOS5引入。</p>

<h3>原理</h3>

<p>简单说是代码在编译阶段，由编译器（LLVM 3.0）自动生成实例的引用计数管理的一些代码（插入retain/release等），起到内存管理的作用。</p>

<h3>在ARC之前</h3>

<p>在ARC之前，需要手工管理内存，原则是：</p>

<ul>
<li>如果你想保持一个对象可用，除非它已经被retain了，否则就需要retain它</li>
<li>如果不再需要一个对象，就需要release它，除非它已经被release了（通过autorelease）</li>
</ul>


<h3>用ARC，程序会变慢吗？</h3>

<p>不会！</p>

<p>ARC就是在需要retain和release的地方为你插入它们——这就是ARC和手工管理内存一样快的原因，当然有时ARC还会更快，因为它在后端还进行了一些优化操作。</p>

<h2>ARC使用</h2>

<p>这里只介绍个ARC使用方法的小子集，即仅记录了我觉得有意思的几个概念原则。ARC使用全集请看<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">Beginning ARC in iOS 5 Tutorial Part 1</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<h3>strong、weak</h3>

<ul>
<li>有strong指针指向那个对象，那个对象就一直存在在内存中。这个原则对实例变量、属性、局部变量都使用</li>
<li>默认所有实例变量局部变量等都是strong的指针，strong表示指针是变量的所有者</li>
<li>weak也可以指向一个对象，但不能是所有者</li>
<li>zeroing weak指针，是指weak指向的对象被释放了，weak指向的变量的值自动变为nil，这个特性防止了指向一个被释放的内存（例如悬空指针、僵尸等这样的说法这种问题就没有啦）</li>
<li>weak不常用，经常使用在父子对象上，因为父有strong指向子，子指向父的时候就只能用weak，常见的datasource、delegate都是这样</li>
</ul>


<h3>ARC特殊注意的地方</h3>

<ul>
<li>ARC不适用于Core Foundation 或 malloc() 和 free()，后者还是要手工管理内存</li>
<li>ARC 有效的时候，由于编译器帮我们做了内存管理的工作，所以我们不需要太担心。但是当与 ARC 管理以外的对象类型交互的时候，就需要特殊的转型关键字，来决定所有权的归属问题。比如“__bridge”。进一步了解可阅读参考文件<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
<li>使用ARC，仍然要想着谁持有谁，后者的生命周期是怎么样的等，因为如果不释放指针，被持有者就一直在内存中</li>
</ul>


<h2>结语</h2>

<p>易飞扬对ARC的7篇博文很值得推荐，大家想深入了解ARC原理可以去阅读： <a href="http://www.yifeiyang.net/development-of-the-iphone-simply-7/">iPhone开发之深入浅出</a>，注：要跳墙。</p>

<p>参考文献<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">Beginning ARC in iOS 5 Tutorial Part 1</a>中说：ARC是代表着OC的未来（大概因为ARC之前的内存管理是开发者们曾经的噩梦吧）。A smart developer tries to automate as much of his job as possible, and that’s exactly what ARC offers: automation of menial programming work that you had to do by hand previously. To me, switching is a no-brainer.</p>

<p>技术在不断飞速演进，做工程开发的我们，紧盯技术发展趋势，勇于接受新的东西。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">Beginning ARC in iOS 5 Tutorial Part 1</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.yifeiyang.net/development-of-the-iphone-simply-7/">iPhone开发之深入浅出</a> 注：该文需要跳墙<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 Autolayout 瞬间入门！]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/10/23/ios7-auto-layout/"/>
    <updated>2013-10-23T20:05:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/10/23/ios7-auto-layout</id>
    <content type="html"><![CDATA[<p>Autolayout是非常先进的一个技术。使用这种技术，适应不同设备屏幕大小差异或设备翻转时对界面的要求，变得很容易。这种技术提供了一种灵活的机制来描述界面上各控件的位置关系。</p>

<p>Xcode5使Autolayout技术更容易使用了。
之前，我对Autolayout只是听说有这种机制，但不知原理、用法。于是阅读了下面的两篇文章（作者： Matthijs Hollemans。目前貌似还没有翻译），算是在Storyboard/Xib上会用了。</p>

<ul>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
</ul>


<p>以下作为阅读笔记，记录应该了解的使用Autolayout的要点(环境是Xcode5，iOS7SDK，Storyboard/Xib)。</p>

<h1>原理要点</h1>

<ul>
<li>Autolayout基本是靠constraints来描述两个view之间的位置关系</li>
<li>Autolayout与以往的frame、bound、center包括autosizing mask等方式都不同，这是一个新的技术，使用Autolayout时候就不用考虑以上那些方式啦，不用再纠结这个view的位置是(x,y,width,height)了！</li>
<li>Autolayout描述位置关系的这两个view，或者是上下层关系，或者是同一层关系。即父子关系或都是父的子（兄弟关系^_^）</li>
<li>Constraints都是NSLayoutConstraint的对象，有一些属性可以在Attributes inspector中修改。当然也可以通过code的方式来实现Storyboard/Xib上的操作</li>
</ul>


<h1>使用方式</h1>

<!-- more -->


<p>这里只介绍Storyboard/Xib使用方式，如果想了解code实现，还要继续阅读其他资料。</p>

<h3>设计及实现方法：</h3>

<p>理清view想要摆放的位置逻辑（设计），根据这个逻辑来设置Constraints（实现）。比如这个Button要距离那个Button固定20个点的距离，并且两个Button要顶端对齐等。把这些逻辑条件变成constraints，当constraints完备到可以确定view的位置时，就完成了设计和实现。</p>

<h3>在Storyboard/Xib上使用</h3>

<ul>
<li><p>Autolayout的checkbox默认是check上的，这个配置是对整个Storyboard或整个Xib生效的</p></li>
<li><p>可以设置Constraints的地方</p>

<p>1 Editor菜单下的Pin以上的4个菜单</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-pin-widths-equally.png" alt="Editor" /></p>

<p>2 在View层次列表中选中Constraints后，在Attributes Inspector中设置</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Equal-widths-in-document-outline.png" alt="viewhierachy" />
<img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Tango-vertical-space-attributes.png" alt="Inspector" /></p>

<p>3 最方面快捷的方式是在悬浮在界面编辑右下角的几个图标</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Auto-Layout-buttons.png" alt="quick menu" /></p></li>
<li><p>蓝色的辅助线：表明Constraints已经足以说明这个view的位置了</p></li>
</ul>


<p>  <img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/Tango-left-align-constraint.png" alt="blue" /></p>

<ul>
<li>橙色的辅助线：表示constraints没有完备到可以说明这个view的位置</li>
</ul>


<p>  <img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/Tango-badge-on-V-space.png" alt="orange" /></p>

<ul>
<li><p>橙色的辅助线上的数字：有时是正数，有时是负数。当你设定或更改了Constraints的时候，可能Constraints与界面上你放置的view的位置是不同的。系统会以Constraints为准，界面上提示你橙色辅助线，线上的数字是这个view的位置与Constraints的差距。这时可以在“Resolve Auto Layout Issues”中选择update frame，这样这个view会自动移动到Constraints所指示的地方；也可以update constraints，这时view的位置不变，constraints变为与界面上的view位置一致的数值</p></li>
<li><p>对没有提供Constraints的view，系统会自动加上constraints，这些constraints是界面上不可见的。这一点是Xcode5与Xcode4在Autolayout技术升级上最大的改进！Xcode4是系统强加constraints，往往会对开发者进行了干扰，因为强加的Constraints往往不是你想要的。Xcode5的这个改进方便了开发者按照自己的意图去设计和实施：首先不用去修改系统强加的constraints；其次有些view的位置你不需要增加Constraints，就可以不用理会。注：这种自动给View加Constraints的方式只适用于你一个Constraints都没加的情况，如果你加了x方向的，y方向的也需要手动添加。</p></li>
<li><p>preview：preview可真方便，你一边在左侧（Portrait、4寸屏）设计实施，一边在preview中看到lanscape的样子或者在3.5寸屏中的样子</p></li>
</ul>


<p>  <img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Storyboard-preview.png" alt="preview" /></p>

<ul>
<li>可设置的constraints的类别：

<ol>
<li>几个View之间对齐

<ul>
<li>边缘对齐、中心对齐等</li>
<li>这几个view宽、高相等等</li>
</ul>
</li>
<li>相对距离。

<ul>
<li>距离最近的一个view的距离</li>
<li>两个view之间的距离</li>
<li>距离顶端、底端、左边缘、右边缘的距离</li>
<li>自己的宽、高</li>
</ul>
</li>
</ol>
</li>
</ul>


<h1>接下来</h1>

<p>以上是一些基础要点，当你用Storyboard/Xib做设计的时候，基本就够用啦。如果觉得这些要点不够，可以参照Matthijs Hollemans在这两篇文章中举的例子，这个例子将带你进行一步步操作。</p>

<p>有些特殊的场景，使用Storyboard/Xib的autolayout是无法实现，需要代码方式的autolayout来实现。代码实现主要围绕着对NSLayoutConstraint对象的操作。具体如何实现，等需要的时候再找时间研究了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewCell在iOS7之后superview的问题]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/10/12/tableviewcell-superview-changed-on-ios7-sdk/"/>
    <updated>2013-10-12T22:36:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/10/12/tableviewcell-superview-changed-on-ios7-sdk</id>
    <content type="html"><![CDATA[<h3>在UITableView中针对某个Cell的操作</h3>

<p>要针对某个UITableView中的Cell做些操作，比如对这个Cell的内容进行查看详细、编辑、删除、或者触发其他功能比如发短信、打电话等，删除、和点击这个Cell在UITableView的Delegate方法中提供，其他的操作就需要识别Cell上的控件（比如Button）对应的action是针对这个Cell的。</p>

<p>一种常用的方式是使用view的层次，在action中找到这个Cell：在</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>方法中，把这个Cell的Button加入到Cell的contentView的subView，并且为这个button添加Target。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Button 操作</span>
</span><span class='line'><span class="p">[</span><span class="n">cell</span><span class="p">.</span><span class="n">contentView</span> <span class="nl">addSubview:</span><span class="n">cell</span><span class="p">.</span><span class="n">button</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">cell</span><span class="p">.</span><span class="n">button</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">buttonAction:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>      <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之后在对应的</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">buttonAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>action中，通过view的层次，去找到对应的Cell：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// iOS7 之前</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">editRemindAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UIButton</span> <span class="o">*</span><span class="n">button</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span>
</span><span class='line'><span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)[[</span><span class="n">button</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span><span class='line'><span class="n">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">indexPathForCell:</span><span class="n">cell</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 继续其他的处理</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>iOS7之后出的问题</h3>

<p>在iOS7之后，这样的办法会报错，错误在通过</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)[[]</span><span class="n">button</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>的方式，得到的不是cell，所以在这行以下用到cell的地方，就会抛出异常。</p>

<p>原因是在iOS7中，在 UITableViewCell 和 UITableViewCell的ContentView之间，还有一个UITableViewCellScrollView，所以通过两次superview往上“爬”，是爬不到UITableViewCell的。</p>

<h3>解决方式</h3>

<p>直观地看，就是向上爬三次superview就行了。为了更好地处理这个问题，应该建立一个UIView的Category（因为这里使用的view的层次superview是UIView的方法），写个Category方法来区分不同情况来得到Cell：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">UIView</span> <span class="nl">(GetCellFromContentviewSubview)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="n">getCellFromContentviewSubview</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">([[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UITableViewCell</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">([[[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UITableViewCell</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)[[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span><span class="p">{</span>
</span><span class='line'>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Something Panic Happens&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之后，把
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)[[</span><span class="n">button</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>替换成
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">button</span> <span class="n">getCellFromContentviewSubview</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>就可以了。</p>

<h3>讨论</h3>

<p>另外一种办法是给控件的tag附上indexPath.row，之后在action中通过tag来得到对应的cell，但如果Cell不是静态的，indexPath.row是会变的。所以这不是一个好的办法。</p>

<p>但我所提供的这个办法，在stackoverflow上有1人给vote down，不知道为什么被vote down。这种办法有什么问题吗？</p>
]]></content>
  </entry>
  
</feed>
