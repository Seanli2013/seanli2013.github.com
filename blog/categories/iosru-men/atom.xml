<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS入门 | 大钟威武]]></title>
  <link href="http://Seanli2013.github.io/blog/categories/iosru-men/atom.xml" rel="self"/>
  <link href="http://Seanli2013.github.io/"/>
  <updated>2013-10-24T18:09:24+08:00</updated>
  <id>http://Seanli2013.github.io/</id>
  <author>
    <name><![CDATA[Xiang LI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS7 Autolayout入门]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/10/23/ios7-auto-layout/"/>
    <updated>2013-10-23T20:05:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/10/23/ios7-auto-layout</id>
    <content type="html"><![CDATA[<p>Autolayout是非常先进的一个技术。使用这种技术，适应不同设备屏幕大小差异或设备翻转时对界面的要求，变得很容易。这种技术提供了一种灵活的机制来描述界面上各控件的位置关系。</p>

<p>Xcode5使Autolayout技术更容易使用了。
之前，我对Autolayout只是听说有这种机制，但不知原理、用法。于是阅读了下面的两篇文章（作者： Matthijs Hollemans。目前貌似还没有翻译），算是在Storyboard/Xib上会用了。</p>

<ul>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
</ul>


<p>以下作为阅读笔记，记录应该了解的使用Autolayout的要点(环境是Xcode5，iOS7SDK，Storyboard/Xib)。</p>

<h1>原理要点</h1>

<ul>
<li>Autolayout基本是靠constraints来描述两个view之间的位置关系</li>
<li>Autolayout与以往的frame、bound、center包括autosizing mask等方式都不同，这是一个新的技术，使用Autolayout时候就不用考虑以上那些方式啦，不用再纠结这个view的位置是(x,y,width,height)了！</li>
<li>Autolayout描述位置关系的这两个view，或者是上下层关系，或者是同一层关系。即父子关系或都是父的子（兄弟关系^_^）</li>
<li>Constraints都是NSLayoutConstraint的对象，有一些属性可以在Attributes inspector中修改。当然也可以通过code的方式来实现Storyboard/Xib上的操作</li>
</ul>


<h1>使用方式</h1>

<p>这里只介绍Storyboard/Xib使用方式，如果想了解code实现，还要继续阅读其他资料。</p>

<h3>设计及实现方法：</h3>

<p>理清view想要摆放的位置逻辑（设计），根据这个逻辑来设置Constraints（实现）。比如这个Button要距离那个Button固定20个点的距离，并且两个Button要顶端对齐等。把这些逻辑条件变成constraints，当constraints完备到可以确定view的位置时，就完成了设计和实现。</p>

<h3>在Storyboard/Xib上使用</h3>

<ul>
<li><p>Autolayout的checkbox默认是check上的，这个配置是对整个Storyboard或整个Xib生效的</p></li>
<li><p>可以设置Constraints的地方</p>

<p>1 Editor菜单下的Pin以上的4个菜单</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-pin-widths-equally.png" alt="Editor" /></p>

<p>2 在View层次列表中选中Constraints后，在Attributes Inspector中设置</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Equal-widths-in-document-outline.png" alt="viewhierachy" />
<img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Tango-vertical-space-attributes.png" alt="Inspector" /></p>

<p>3 最方面快捷的方式是在悬浮在界面编辑右下角的几个图标</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Auto-Layout-buttons.png" alt="quick menu" /></p></li>
<li><p>蓝色的辅助线：表明Constraints已经足以说明这个view的位置了</p></li>
</ul>


<p>  <img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/Tango-left-align-constraint.png" alt="blue" /></p>

<ul>
<li>橙色的辅助线：表示constraints没有完备到可以说明这个view的位置</li>
</ul>


<p>  <img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/Tango-badge-on-V-space.png" alt="orange" /></p>

<ul>
<li><p>橙色的辅助线上的数字：有时是正数，有时是负数。当你设定或更改了Constraints的时候，可能Constraints与界面上你放置的view的位置是不同的。系统会以Constraints为准，界面上提示你橙色辅助线，线上的数字是这个view的位置与Constraints的差距。这时可以在“Resolve Auto Layout Issues”中选择update frame，这样这个view会自动移动到Constraints所指示的地方；也可以update constraints，这时view的位置不变，constraints变为与界面上的view位置一致的数值</p></li>
<li><p>对没有提供Constraints的view，系统会自动加上constraints，这些constraints是界面上不可见的。这一点是Xcode5与Xcode4在Autolayout技术升级上最大的改进！Xcode4是系统强加constraints，往往会对开发者进行了干扰，因为强加的Constraints往往不是你想要的。Xcode5的这个改进方便了开发者按照自己的意图去设计和实施：首先不用去修改系统强加的constraints；其次有些view的位置你不需要增加Constraints，就可以不用理会。注：这种自动给View加Constraints的方式只适用于你一个Constraints都没加的情况，如果你加了x方向的，y方向的也需要手动添加。</p></li>
<li><p>preview：preview可真方便，你一边在左侧（Portrait、4寸屏）设计实施，一边在preview中看到lanscape的样子或者在3.5寸屏中的样子</p></li>
</ul>


<p>  <img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/09/Storyboard-preview.png" alt="preview" /></p>

<ul>
<li>可设置的constraints的类别：

<ol>
<li>几个View之间对齐

<ul>
<li>边缘对齐、中心对齐等</li>
<li>这几个view宽、高相等等</li>
</ul>
</li>
<li>相对距离。

<ul>
<li>距离最近的一个view的距离</li>
<li>两个view之间的距离</li>
<li>距离顶端、底端、左边缘、右边缘的距离</li>
<li>自己的宽、高</li>
</ul>
</li>
</ol>
</li>
</ul>


<h1>接下来</h1>

<p>以上是一些基础要点，如果觉得这些要点不够，可以参照Matthijs Hollemans在这两篇文章中举的例子，这个例子将带你进行一步步操作。</p>

<p>有的要求，界面上的autolayout也无法实现，需要代码方式的autolayout来实现。具体如何实现，再找时间研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewCell在iOS7之后superview的问题]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/10/12/tableviewcell-superview-changed-on-ios7-sdk/"/>
    <updated>2013-10-12T22:36:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/10/12/tableviewcell-superview-changed-on-ios7-sdk</id>
    <content type="html"><![CDATA[<h3>在UITableView中针对某个Cell的操作</h3>

<p>要针对某个UITableView中的Cell做些操作，比如对这个Cell的内容进行查看详细、编辑、删除、或者触发其他功能比如发短信、打电话等，删除、和点击这个Cell在UITableView的Delegate方法中提供，其他的操作就需要识别Cell上的控件（比如Button）对应的action是针对这个Cell的。</p>

<p>一种常用的方式是使用view的层次，在action中找到这个Cell：在</p>

<p><code>
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</code>
方法中，把这个Cell的Button加入到Cell的contentView的subView，并且为这个button添加Target。</p>

<p><code>
// Button 操作
[cell.contentView addSubview:cell.button];
[cell.button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];        
</code>
之后在对应的
<code>
- (void)buttonAction:(id)sender
</code>
action中，通过view的层次，去找到对应的Cell：</p>

<p>```
// iOS7 之前
&ndash; (void)editRemindAction:(id)sender
{</p>

<pre><code>UIButton *button = (UIButton *)sender;
UITableViewCell *cell = (UITableViewCell *)[[button superview] superview];
NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
// 继续其他的处理
</code></pre>

<p>}
```</p>

<h3>iOS7之后出的问题</h3>

<p>在iOS7之后，这样的办法会报错，错误在通过
<code>
UITableViewCell *cell = (UITableViewCell *)[[]button superview] superview];
</code>
的方式，得到的不是cell，所以在这行以下用到cell的地方，就会抛出异常。</p>

<p>原因是在iOS7中，在 UITableViewCell 和 UITableViewCell的ContentView之间，还有一个UITableViewCellScrollView，所以通过两次superview往上“爬”，是爬不到UITableViewCell的。</p>

<h3>解决方式</h3>

<p>直观地看，就是向上爬三次superview就行了。为了更好地处理这个问题，应该建立一个UIView的Category（因为这里使用的view的层次superview是UIView的方法），写个Category方法来区分不同情况来得到Cell：</p>

<p>```
@implementation UIView (GetCellFromContentviewSubview)
&ndash; (UITableViewCell *)getCellFromContentviewSubview
{</p>

<pre><code>if ([[[self superview] superview] isKindOfClass:[UITableViewCell class]]) {
    return (UITableViewCell *)[[self superview] superview];
}
else if ([[[[self superview] superview] superview] isKindOfClass:[UITableViewCell class]]) {
    return (UITableViewCell *)[[[self superview] superview] superview];
}
else{
     NSLog(@"Something Panic Happens");
}
return nil;
</code></pre>

<p>}
@end
```</p>

<p>之后，把
<code>
UITableViewCell *cell = (UITableViewCell *)[[button superview] superview];
</code></p>

<p>替换成
<code>
UITableViewCell *cell = (UITableViewCell *)[button getCellFromContentviewSubview];
</code></p>

<p>就可以了。</p>

<h3>讨论</h3>

<p>另外一种办法是给控件的tag附上indexPath.row，之后在action中通过tag来得到对应的cell，但如果Cell不是静态的，indexPath.row是会变的。所以这不是一个好的办法。</p>

<p>但我所提供的这个办法，在stackflow上有1人给vote down，不知道为什么被vote down。这种办法有什么问题吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习iOS传感器的使用]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/08/05/ios-accelerometer/"/>
    <updated>2013-08-05T18:17:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/08/05/ios-accelerometer</id>
    <content type="html"><![CDATA[<h3>iOS涉及到的传感器</h3>

<p>不用查资料，用过iPhone的同学都知道。iphone中有加速度传感器，可以感知手机在哪个方向上有加速度，比如屏幕的翻转、飞行控制游戏等都是利用这个特征做的；有指南针（貌似叫陀螺仪？），可以知道你的方向；还有定位装置，可以知道你现在的位置在哪里。</p>

<p>加速度传感器相关功能是由CoreMotion提供；指南针、定位信息相关功能由CoreLocation提供。</p>

<h3>CoreMotion</h3>

<p>在CoreMotion.framework中，有下面这些类：</p>

<p><code>
CMAccelerometerData
CMAttitude
CMDeviceMotion
CMGyroData
CMLogItem
CMMagnetometerData
CMMotionManager
</code>
每个是做什么的，可以在官方文档中阅读，就不在这翻译了。其中实现对设备加速度的识别，主要是使用CMMotionManager。</p>

<h3>CMMotionManager</h3>

<p>如何使用CMMotionManager？</p>

<p>Step1：产生一个CMMotionManager的实例mManager。</p>

<p>Step2：实例使用方法isAccelerometerAvailable判断加速度传感器是否可用。</p>

<p>Step3：如果可用，则通过方法setAccelerometerUpdateInterval设定采样频率。</p>

<p>Step4：最后使用startAccelerometerUpdatesToQueue:withHandler开始采样及对采样进行处理。</p>

<h3>测试代码</h3>

<p>实现一个小球在一个框中运动，运动的轨迹是根据手机的倾斜角度计算，运动的方向同倾斜的角度一致，并且倾斜角度越大运动速度越快。
<a href="http://bigbelldev.com/codes/testGravity.zip">代码下载</a>
在代码的实现过程中，对view的层次有了更深的体会。此外，在给label供数的时候，发现刚好使用代理的方式，算是也对代理做了联系。</p>

<h3>编码过程中遇到七七八八问题的记录</h3>

<!-- more -->


<h4>Code Sign error:</h4>

<p>着手时，借鉴了<a href="http://code4app.com/ios/Gravity-View/4fb086d96803fa1b5e000000">这个代码</a>，在编译时遇到了这个问题：</p>

<pre><code>Code Sign error: The identity 'iPhone Developer: Haomian Wang (33P29785DD)' doesn't match any valid certificate/private key pair in the default keychain
</code></pre>

<p><strong>原因：</strong></p>

<p>CodeSigning签署的不是你的provisioning，没法在真机上使用。</p>

<p><strong>解决办法：</strong></p>

<p>在TARGETS中的Build Settings里，找Code Signing Identity，里面把不是自己的developer改成自己的provisioning。</p>

<p><img class="<a" src="href="http://bigbelldev.com/images/codeSignErr.png">http://bigbelldev.com/images/codeSignErr.png</a>"></p>

<p><strong>注：</strong></p>

<p>借鉴的这份代码是使用acceleroImeter:didAccelerate方法来处理扑捉到的加速度信息，但这个方法已经在iOS5废弃了，现在都使用CoreMotion框架来实现。</p>

<h4>未添加CoreMotion.framework</h4>

<p>编译自己代码时，首先出现了如下错误：</p>

<p><img class="<a" src="href="http://bigbelldev.com/images/frameworkErr.png">http://bigbelldev.com/images/frameworkErr.png</a>"></p>

<p><strong>原因：</strong></p>

<p>很简单，是代码中使用了CoreMotion，但工程中没有添加CoreMotion.framework。这很常见：在使用CoreLocation等framework时，也要想着在工程中添加framework。</p>

<p><strong>解决办法：</strong>
在下图处添加CoreMotion.framework</p>

<p><img class="<a" src="href="http://bigbelldev.com/images/addFramework.png">http://bigbelldev.com/images/addFramework.png</a>"></p>

<h4>给工程改名字导致编译不过</h4>

<p><strong>原因：</strong></p>

<p>都很简单了，都是名字、路径更改导致的找不到文件。</p>

<p><strong>解决办法：</strong></p>

<p>改名字注意三点：</p>

<ol>
<li>修改了Project的名字后，Xcode会提示你一些其他地方也需要修改，你就按着提示修改；</li>
<li>也修改本地文件夹的名字后，注意xcode工程中的文件列表文件名是否会变为红色，如果是红色，需要你再想办法重新加一下路径；</li>
<li>工程中的BuildSettings，这里最好搜一下你原来的名字，进行更改。我遇到的编译不过都是这里的路径还保留着原来的名字，未作更改。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习iOS的手势gestures]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/08/04/ios-gestures/"/>
    <updated>2013-08-04T17:36:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/08/04/ios-gestures</id>
    <content type="html"><![CDATA[<h3>iOS手势简介</h3>

<p>iOS的手势，就是程序识别到你在屏幕上做的一些手势动作，做出反应。常见的手势有</p>

<ul>
<li>UITapGestureRecognizer</li>
<li>UISwipeGestureRecognizer</li>
<li>UIRotationGestureRecognizer</li>
<li>UIPanGestureRecognizer</li>
<li>UIPinchGestureRecognizer</li>
<li>UILongPressGestureRecognizer</li>
</ul>


<p>其中tap还有单击、双击，Swipe还有向上、下、左、右等区分。</p>

<p>识别这些手势，对每种手势做个反应，没啥难度。下面总结了5个步骤，和几个特殊的地方。</p>

<h3>使用过程分5步</h3>

<p>step1: 声明和初始化一个手势识别器
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSingleTap:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleDoubleTap:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">twoFingerTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleTwoFingerTap:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">swipeLeft</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSwipe:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">swipeRight</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSwipe:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UIRotationGestureRecognizer</span> <span class="o">*</span><span class="n">rotation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIRotationGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleRotation:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UIPanGestureRecognizer</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePan:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UIPinchGestureRecognizer</span> <span class="o">*</span><span class="n">pinch</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIPinchGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePinch:</span><span class="p">)];</span>
</span><span class='line'><span class="n">UILongPressGestureRecognizer</span> <span class="o">*</span><span class="n">longPress</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILongPressGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleLongPress:</span><span class="p">)];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
step2：对手势识别器进行属性设定</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">doubleTap</span> <span class="nl">setNumberOfTapsRequired:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">twoFingerTap</span> <span class="nl">setNumberOfTouchesRequired:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">swipeLeft</span> <span class="nl">setNumberOfTouchesRequired:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">swipeLeft</span> <span class="nl">setDirection:</span><span class="n">UISwipeGestureRecognizerDirectionLeft</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">swipeRight</span> <span class="nl">setNumberOfTouchesRequired:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">swipeRight</span> <span class="nl">setDirection:</span><span class="n">UISwipeGestureRecognizerDirectionRight</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>step3：把手势识别器加到view中去</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">twoFingerTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">swipeLeft</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">swipeRight</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">rotation</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">pan</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">pinch</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">longPress</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>step4：出现冲突时，要设定优先识别顺序</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">twoFingerTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">pan</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">swipeRight</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">pan</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">swipeLeft</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
step5：去实现处理扑捉到手势之后的动作
填写各个处理函数，如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleSingleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleDoubleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleTwoFingerTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleSwipe:</span><span class="p">(</span><span class="n">UISwipeGestureRecognizer</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleRotation:</span><span class="p">(</span><span class="n">UIRotationGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handlePan:</span><span class="p">(</span><span class="n">UIPanGestureRecognizer</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handlePinch:</span><span class="p">(</span><span class="n">UIPinchGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleLongPress:</span><span class="p">(</span><span class="n">UILongPressGestureRecognizer</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>测试代码</h3>

<p>在下面测试代码中，实现了六个手势的处理。
<a href="http://bigbelldev.com/codes/testGestures.zip">代码下载</a></p>

<p>在实现的时候，有几个需要注意的地方：</p>

<h3>注意几个小地方</h3>

<!-- more -->


<h4>区分单击双击、滑动（Swipe）和拖拽（Pan）</h4>

<p>在识别单击双击时，逻辑上应该只有判断非双击时，才判定为单击，否则永远都只会判断为单击；在识别滑动和拖拽时也是一样，应该先判断是否是swipe，不是则才是拖拽，否则都只会识别拖拽。实现方式见上面Step4，使用requireGestureRecognizerToFail方法。</p>

<h4>向每个方向滑动（Swipe）都是一个独立的手势</h4>

<p>如果你想接受向多个方向的滑动，对每个方向都要声明一个手势，专门代表这个方向的滑动。向左向右就是两个，加上向上向下就是4个。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">swipeLeft</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSwipe:</span><span class="p">)];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">swipeRight</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSwipe:</span><span class="p">)];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后，你在扑捉到滑动手势之后的处理函数中，去判断<code>UISwipeGestureRecognizer *</code>类型的<code>recognizer.direction</code>是属于：</p>

<ul>
<li>UISwipeGestureRecognizerDirectionLeft</li>
<li>UISwipeGestureRecognizerDirectionUp</li>
<li>UISwipeGestureRecognizerDirectionDown</li>
<li>UISwipeGestureRecognizerDirectionRight</li>
</ul>


<p>中的哪个，然后再进一步去处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Apple的编码规范]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/07/29/coding-guidelines-for-cocoa/"/>
    <updated>2013-07-29T14:19:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/07/29/coding-guidelines-for-cocoa</id>
    <content type="html"><![CDATA[<p>编码规范很重要，毕竟你的代码除了你，还有很多人可能需要阅读。遵守一个编码规范，可以使你的代码易于理解和维护。</p>

<p>使用编码规范是个基础技能，采用谁家的编码规范比较好呢？看你给谁工作了。对OC，苹果、google都有自己的一套编码规范，估计其他公司也都有自己成行的编码规范。</p>

<p>google家写过一个被广泛接受的C++编码规范，他家的oc编码规范是结合了苹果家的oc规范和他自家的c++规范。所以对于iOS新手，我觉得先了解一下苹果家的编码规范比较好。</p>

<p>苹果家的编码规范<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html#//apple_ref/doc/uid/10000146-SW1">Coding Guidelines for Cocoa</a>。</p>

<p>简单翻译了下：</p>

<h2>代码名称基础</h2>

<h3>基本原则</h3>

<h4>清晰</h4>

<ol>
<li>又清晰又简洁是最好的了，但简洁不如清晰重要</li>
<li>总的讲不要使用单词的简写，除了非常非常常用的简写以外（<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE">Acceptable Abbreviations and Acronyms</a>），尽量使用单词全称，长点儿不要紧</li>
<li>API的名称不要有歧义，一看你的API就知道是以什么方式做了什么事情，不要让人有疑问</li>
</ol>


<h4>一致性</h4>

<p>做某个事情代码通常都叫这个名字，比如tag、setStringValue，那么你也这么叫。你在不确定怎么起名字的时候，可以参考一些常用的名字：<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-1001865">Method Arguments</a></p>

<p><code>
...action:(SEL)aSelector
...alignment:(int)mode
...atIndex:(int)index
...content:(NSRect)aRect
...doubleValue:(double)aDouble
...floatValue:(float)aFloat
...font:(NSFont *)fontObj
...frame:(NSRect)frameRect
...intValue:(int)anInt
...keyEquivalent:(NSString *)charCode
...length:(int)numBytes
...point:(NSPoint)aPoint
...stringValue:(NSString *)aString
...tag:(int)anInt
...target:(id)anObject
...title:(NSString *)aString
</code></p>

<h3>前缀</h3>

<p>前缀一般是2到3个大写之母，可以用来给类、协议、函数、常量、typedef结构起名字时用。但不要给方法用，方法存在的命名空间是类定义的。也不要给结构体的字段使用（the fields of a structure）//没明白是啥意思？</p>

<table>
<thead>
<tr>
<th align="left">Prefix </th>
<th align="left"> Cocoa Framework</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">NS  </td>
<td align="left">   Application Kit</td>
</tr>
<tr>
<td align="left">   NS </td>
<td align="left"> Foundation</td>
</tr>
<tr>
<td align="left">   AB </td>
<td align="left"> Address Book</td>
</tr>
<tr>
<td align="left">IB </td>
<td align="left"> Interface Builder</td>
</tr>
</tbody>
</table>


<!-- more -->


<h3>字体排版规范</h3>

<p>1  多个词在一起时，不要使用标点符号（包括下划线、斜杠等），一般词首字母大写即可。</p>

<ul>
<li><p>具体到方法名，第一个词首字母小些，后面的词首字母大写，不要用前缀；
  <code>
  fileExistsAtPath:isDirectory:
 </code></p></li>
<li><p>函数名、常量名使用相关联的类的同样的前缀，后面跟着的词首字母大写。
  <code>
  NSRunAlertPanel
  NSCellDisabled
 </code></p></li>
</ul>


<p>2  避免使用下划线来命名私有方法名（要是命名一个实例变量名是可以的），这算是Apple的保留写法，如果使用了可能会和已存在的函数重名。</p>

<h3>类和协议名</h3>

<p>类名中应该包含一个名词来说明这个类（或者类的对象）是做什么的。并且这个雷鸣应该有个合适的前缀。例如NSString、NSDate、NSButton、UIApplication等等。</p>

<p>协议应该按照他们的行为命名</p>

<p>1  多数协议是一组方法的集合，并不是专门为了某个类服务的。这类协议的命名要区别于类的命名样子，一般都是加个ing</p>

<table>
<thead>
<tr>
<th align="left">NSLocking </th>
<th align="left"> Good</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">NSLock </td>
<td align="left"> Poor (seems like a name for a class)</td>
</tr>
</tbody>
</table>


<p>2  还有一些协议是把一些没啥关系的方法放在一起，这种协议一般是协助一个类。这种情况下，这种协议可以和类名一样。例子就是NSObject。</p>

<h3>头文件</h3>

<p>1  定义一个独立的类或协议，这时类名和h文件名一样</p>

<table>
<thead>
<tr>
<th align="left">Header file </th>
<th align="left"> Declares</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">NSLocale.h </td>
<td align="left"> The NSLocale class.</td>
</tr>
</tbody>
</table>


<p>2  定义关联的一些类或协议，一般使用最初最基本的那个类的名字</p>

<table>
<thead>
<tr>
<th align="left">Header file </th>
<th align="left"> Declares</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">NSString.h </td>
<td align="left"> NSString and NSMutableString classes.</td>
</tr>
<tr>
<td align="left">NSLock.h </td>
<td align="left"> NSLocking protocol and NSLock, NSConditionLock, and NSRecursiveLock classes.</td>
</tr>
</tbody>
</table>


<p>3  包含Framework的头文件，使用framework的名字+.h，包含这个framework的公共头文件。</p>

<table>
<thead>
<tr>
<th align="left">Header file </th>
<th align="left"> Framework</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Foundation.h </td>
<td align="left"> Foundation.framework.</td>
</tr>
</tbody>
</table>


<p>4  给另外一个framwork中的类增加API时，应该延用原始类的名字。例如NSBundleAdditions.h header file of the Application Kit</p>

<p>5  相关联的函数和数据类型在一起时，使用一个最贴切的名字做头文件。例如NSGraphics.h (Application Kit)，包含了相关的函数、常量、结构体、数据类型等。</p>

<p>以上是基础的明明规则，在苹果家的代码规范中，接下来分别介绍了方法命名、函数命名、属性和数据类型命名。新手都应该好好阅读下。</p>

<p>最后还专门为framework开发者提供了一些Tips和Techniques。有兴趣的童鞋也可好好阅读下。</p>
]]></content>
  </entry>
  
</feed>
