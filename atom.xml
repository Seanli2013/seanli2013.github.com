<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[大钟威武]]></title>
  <link href="http://Seanli2013.github.io/atom.xml" rel="self"/>
  <link href="http://Seanli2013.github.io/"/>
  <updated>2013-07-26T22:03:56+08:00</updated>
  <id>http://Seanli2013.github.io/</id>
  <author>
    <name><![CDATA[Xiang LI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac下的RSS阅读器]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/07/26/rss-read-on-mac/"/>
    <updated>2013-07-26T21:40:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/07/26/rss-read-on-mac</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习iOS的delegation的实现]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/07/26/ios-delegation-and-protocol/"/>
    <updated>2013-07-26T14:11:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/07/26/ios-delegation-and-protocol</id>
    <content type="html"><![CDATA[<h2>什么是delegation</h2>

<p>delegation<em>[ˌdelɪ&#8217;ɡeɪʃn]</em>，中文叫委托，是两个类之间传递信息的一种方式。也是一种设计模式。</p>

<p>其作用和实现过程可以这么理解：</p>

<p>A类：A正在工作中发现，有的工作自己做不方便，需要委托别人帮忙做。A要制定个协议，委托的人要遵守这个协议，按照协议中的方法把工作给做了。A的属性有遵守这个协议的delegate，A知道这个delegate会帮助完成协议中的工作。</p>

<p>B类：B会受A委托，B类需要接受这个协议，把协议中的必须执行的方法给执行了。B有个属性是A的对象，在B类中把A的对象的delegate设置成B。</p>

<p>这里提到的协议，即protocol，不熟的孩纸可以仔细阅读<a href="http://www.cocoachina.com/newbie/basic/2010/0917/2106.html">协议（Protocol）的用法和代码例子</a></p>

<h2>什么时候使用delegation</h2>

<p>类之间传递信息可以有多种机制，除了delegation还有notification、observer等方式。一般两个类之间有点儿关系（比如view和subview，view和controller之间，使用delegate）的时候，经常使用delegation；两个模块之间没有啥关系，可能使用notification会更好。有兴趣的孩纸推荐阅读一下<a href="http://blog.shinetech.com/2011/06/14/delegation-notification-and-observation/">When to use Delegation, Notification, or Observation in iOS</a>。</p>

<p>在我们使用控件如textField、textView等时，都会碰到他们的delegation，这是非常好的delegation的例子，要好好去理解delegation的功效。</p>

<h2>delegation实践</h2>

<h3>模拟场景</h3>

<p>张老师在外地开会，她会发短信告诉学生代表什么时候让学生们放假，学生代表承诺老师会准确传达。张老师发了短信给学生代表，说7月26日周五大家放假。</p>

<h3>设计</h3>

<p>张老师是委托人，学生代表是受委托人，她和学生代表定的协议中的方法：由学生代表告诉学生们什么时候放假。
张老师发短信给学生代表这个时候会触发他们之间协议的方法。</p>

<h3>测试代码</h3>

<p>测试代码中有老师和学生代表两个类，输出的结果见NSLog。<a href="http://seanli2013.github.io/codes/textDelegationAndProtocol.zip">代码下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习iOS的单例模式实现]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/07/25/singleton/"/>
    <updated>2013-07-25T20:42:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/07/25/singleton</id>
    <content type="html"><![CDATA[<h2>为什么学习iOS的单例模式实现</h2>

<p>从设计模式开始说起。<a href="http://baike.baidu.com/view/66964.htm">设计模式（Design pattern）</a>是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。</p>

<p>单例模式是设计模式中的一种，并且比较简单，在iOS开发中会常用到，所以新手可以先学习使用单例模式。</p>

<p>新手想了解更多设计模式，可以先了解一下<a href="http://blog.csdn.net/zhengzhb/article/details/7187278">类之间的关系</a>，然后看看<a href="http://blog.csdn.net/zhengzhb/article/details/7278174">设计模式一般遵循的6个原则</a>，之后可以了解下<a href="http://blog.csdn.net/zhengzhb/article/details/7331369">23个设计模式</a>。这里23个设计模式，作者是针对java讲的，但对ios程序设计也一样非常有意义。设计模式本身就是最佳实践的一些总结，新手不必一口气把每个设计模式的奥义都搞清楚，只要了解有这种设计模式，在实践中逐步研究和理解，会更有效率。</p>

<p>对于iOS常用的设计模式，<strong>推荐阅读</strong><a href="http://beyondvincent.com">破船之家</a>写的<a href="http://beyondvincent.com/2013/05/05/ios%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%82%E5%AF%9F%E8%80%85/">三篇iOS设计模式</a>文章，此外，可以参考<a href="http://marshal.easymorse.com/archives/3296">iOS的一些基本设计模式</a>。</p>

<h2>什么是单例模式</h2>

<p>单例模式，英文名叫Singleton。规定这个类只能同时存在一个实例，这个实例可以全局调用。</p>

<h3>什么情况下使用</h3>

<p>有个事你只想让一个人去做，这个人把这个事儿做怎么样，你又希望大家都知道，这种时候可以使用单例模式。这个模式可以用来做一些比较“专注”的任务，同时方便的把资源共享出来。</p>

<h3>什么情况下不使用</h3>

<p>有人说当这个单例类非常频繁会扩展时，单例模式不适用<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>还有违反了单一职责的设计原则，使代码之间耦合度变强，无法进行有效的单元测试<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。
所以使用的时候要避免这些情况，尽量让单例不存在过于复杂的依赖性和继承，保证其松耦合等<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<h2>单例模式实现</h2>

<p>在<a href="http://beyondvincent.com">破船之家</a>的<a href="http://beyondvincent.com/2013/05/09/ios%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F02%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">iOS设计模式(02):单例模式</a>文章中写得很清楚，分为使用ARC情况和非ARC情况。我尝试了其中ARC+GCD的方法，it works fine。</p>

<h3>测试代码</h3>

<p>在下面测试代码中，实现了2个viewController都从单例类实例中拿数据，第1个viewController的按钮更改了单例类实例的内容，在第2个viewController中可以看到更改。
<a href="http://seanli2013.github.io/codes/testSingleton.zip">代码下载</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.nowamagic.net/librarys/veda/detail/1776">使用单例模式需要注意的几个问题</a>——这篇文章我看得一头雾水，应该怎么理解？<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">What is so bad about Singletons?</a>，这个问题的被采纳答案<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://gracelancy.com/?p=386">Singletons in Cocoa, are they evil?</a>推荐大家看这个，这个里面援引了stackflow中有人提到的单例的4个缺点。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习使用code实现iOS界面]]></title>
    <link href="http://Seanli2013.github.io/blog/2013/07/25/ios-gui-implementation-discuss/"/>
    <updated>2013-07-25T19:08:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2013/07/25/ios-gui-implementation-discuss</id>
    <content type="html"><![CDATA[<h2>为什么要学习使用code实现iOS界面？</h2>

<h3>iOS界面三种实现方式</h3>

<p>code、IB、Storyboard这三种方式都可以实现iOS界面，哪种实现方式合适呢？众说纷纭，合理的答案是依情况而定——嘿，废话。作为iOS的初学者，该如何选择呢？</p>

<h4>发展趋势</h4>

<p>最早时候，大家都用code，后来出现了IB（interface builder），再后来出现了Storyboard。现在的初学者们，上来接触的就是Storyboard，因为苹果现在的官网教材也好、stanford有名的CS193P课程（2013年叫做Coding Together: Developing Apps for iPhone and iPad, 可以在iTunesU中免费下载）都在推Storyboard。</p>

<h4>优缺点<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h4>

<p>简单对比一下，更多优缺点比较，请搜搜看<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<table>
<thead>
<tr>
<th></th>
<th> 方法 </th>
<th> 优点 </th>
<th> 缺点 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>code </td>
<td> 可以对界面掌控得非常精确；代码容易管理和追踪，很干净，控件属性等有修改可以非常容易看到  </td>
<td> 代码量大，略显麻烦；接手项目的新人不容易看清楚模块之间的关系 </td>
</tr>
<tr>
<td></td>
<td>ib </td>
<td> 较容易地把界面设计出来  </td>
<td> 界面在ib中体现一部分，在code中体现一部分，阅读和维护起来有难度 </td>
</tr>
<tr>
<td></td>
<td>Storyboard </td>
<td> 较为清晰的体现各模块之间的关系；较容易把界面设计出来 </td>
<td> 也会借助code来实现一些界面；多人协作开发时，不好管理 </td>
</tr>
</tbody>
</table>


<p>可见，使用code实现界面是最基础的方式，ib和storyboard是希望减少工作量。学习使用code开发界面有助于新手理解其中的原理。</p>

<h4>新手要熟练使用code，也会Storyboard</h4>

<p>真正干活的时候，大家可能会哪个用得熟就用哪个了。对于我们新手，有精力的话，三种方式都要精通。如果没有那么多精力，至少要熟练使用code实现，同时也要会使用Storyboard。因为Storyboard在快速实现demo时，或小项目你自己开发时，效率是非常高的，可以节约你大量时间。并且从发展角度看，Storyboard会做得越来越完善。</p>

<h2>如何用code设置控件</h2>

<p>推荐这篇文章：<a href="http://www.cocoachina.com/bbs/read.php?tid=131516">IOS开发之纯代码界面&mdash;基本控件使用篇</a>，学习的时候，从第一课开始，一节一节仔细阅读。全是干货，非常容易的你就学会了。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">Storyboard看上去很美</a>.在这篇文章中，作者根据切身实践对优缺点进行了评述，值得借鉴<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>可以参考搜索结果:<a href="http://www.zhihu.com/question/20256649">iOS开发过程中，你更喜欢用Storyboard/xib做界面，还是直接用代码来写界面？</a>; <a href="http://www.zhihu.com/question/19670944">iPhone开发中，代码写界面和IB设计界面哪个更方便？</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress发表blog文章和管理blog]]></title>
    <link href="http://Seanli2013.github.io/blog/2011/07/11/octopress-create-and-manage-blog/"/>
    <updated>2011-07-11T05:59:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2011/07/11/octopress-create-and-manage-blog</id>
    <content type="html"><![CDATA[<h3>发表文章的过程</h3>

<ol>
<li>本地建立一个新文章。rake new_post[&ldquo;new post title&rdquo;]，在“source/_posts/”目录下生成一个markdown文件</li>
<li>编辑这个markdown文件，你可以改名字，也可以改文件的内容</li>
<li>使用命令rake generate，这时在本地把你添加的新文章做了生成</li>
<li>使用命令rake preview，这时在浏览器中输入localhost:4000来在本地查看效果</li>
<li>效果ok，使用命令rake deploy，把本地的部署到github服务端</li>
<li>过一会儿之后，你的服务端的blog就更新成最新的啦</li>
</ol>


<h3>管理和配置界面</h3>

<p>管理和配置界面，就是修改你本地的若干配置文件，之后rake generate成功后，再deploy，就完成了修改。</p>

<h4>拿增加页面为例</h4>

<p>搭建好的octopress，默认只有blog和achieve两个页面，要增加页面需要两步：</p>

<ol>
<li>本地建立个新文件夹。位置没关系，命令使用rake new_page[new-page-title]，这个文件夹内应该会包含一个index.markdown的文件，如果没有这个文件，请新建一个</li>
<li><p>在blog主页的导航栏上还需要新建个页面名称，否则在blog上是看不到你新建的页面的，这需要编辑</p>

<p> <code>
 source/_includes/custom/navigation.html
</code></p></li>
</ol>


<p>编辑后的结果类似：<!--more--></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul class="main-navigation"&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://Seanli2013.github.io/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>      &lt;li&gt;&lt;a href="http://Seanli2013.github.io/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>      &lt;li&gt;&lt;a href="http://Seanli2013.github.io/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>      &lt;li&gt;&lt;a href="http://Seanli2013.github.io/test"&gt;Test Field&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;   </span></code></pre></td></tr></table></div></figure>


<p>实际上就是把blog主页上导航的部分指向你新建的页面所在的文件夹名称。
部署的方式与发表文章过程一致。</p>

<p>修改页面的方式也可参考<a href="http://icodeit.org/2013/01/add-new-page-to-octopress/">为octopress添加新的页面(page)</a>，在这片文章中对一个典型的octopress博客的source目录布局进行了描述。</p>

<p>再提一下评论，评论多数人说多说好用，多说的设置参考<a href="http://ihavanna.org/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">为 Octopress 添加多说评论系统</a>。</p>

<p>更多的配置管理，可自行进行搜索，网上信息很多。比如这位朋友写的<a href="http://www.yanjiuyanjiu.com/blog/20130402/">配置</a>。</p>

<p>另外别忘了octopress的<a href="http://octopress.org">官网</a>，信息量更大呢。</p>

<h3>编辑的文章的工具</h3>

<p>我在用<a href="http://mouapp.com">Mou</a>，markdown语言，挺好使的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下搭建octopress]]></title>
    <link href="http://Seanli2013.github.io/blog/2011/07/03/mac-dajian-octopress/"/>
    <updated>2011-07-03T05:59:00+08:00</updated>
    <id>http://Seanli2013.github.io/blog/2011/07/03/mac-dajian-octopress</id>
    <content type="html"><![CDATA[<h2>准备工作</h2>

<h3>安装Ruby（1.9.3）</h3>

<p>mac自带的Ruby版本低，不能适用。mac安装Ruby1.9.3的过程参见<a href="http://www.hoowolf.net/2012/03/29/installing-ruby-on-rails-on-mac-os-x-lion/">Mac安装Ruby on Rails</a>，讲的非常清楚。现在有Ruby2.0.0，具体安装方式请google。</p>

<h3>你的系统还应该装有git，rvm</h3>

<h2>开始搭建</h2>

<p>搭建过程参考<a href="http://ishalou.com/blog/2012/10/15/how-to-use-octopress/">使用Octopress + Github管理blog</a>和<a href="http://www.yangzhiping.com/tech/octopress.html">Ruby开源项目介绍(1)：octopress——像黑客一样写博客</a>，这第二篇有些标题党哈。这两篇都可参考。</p>

<p><strong>注意:</strong>参考这两篇文章前，需要<strong><em>先安装Ruby1.9.3</em></strong>，否则按照他们说的步骤来，你可能遇到很多个步骤无法执行完全成功。</p>

<h2>安装过程中可能遇到的问题</h2>

<!--more-->


<h3>1. 如何在mac系统中root权限？</h3>

<p>用sudo su，像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shawntekiMacBook-Pro:~ shawnli$ su
</span><span class='line'>Password:
</span><span class='line'>su: Sorry
</span><span class='line'>shawntekiMacBook-Pro:~ shawnli$ sudo su
</span><span class='line'>Password:
</span><span class='line'>sh-3.2#</span></code></pre></td></tr></table></div></figure>


<h3>2. bundle update不成功。</h3>

<h4>如果遇到的是bundle，command not found</h4>

<p>这时你需要安装bundle</p>

<pre><code>shawntekiMacBook-Pro:~ shawnli$ gem install bundler
</code></pre>

<p>这时你可能遇到不成功</p>

<pre><code>shawntekiMacBook-Pro:~ shawnli$ gem install bundler
WARNING:  RubyGems 1.2+ index not found for:


RubyGems will revert to legacy indexes degrading performance.
ERROR:  could not find gem bundler locally or in a repository
</code></pre>

<p>很可能是网络的问题，你可以尝试使用代理或者从公网换成教育网什么的……成功后显示</p>

<pre><code>shawntekiMacBook-Pro:~ shawnli$ gem install bundler
Successfully installed bundler-1.3.5
1 gem installed
Installing ri documentation for bundler-1.3.5...
Installing RDoc documentation for bundler-1.3.5...
</code></pre>

<p>使用下面命令可以查看bundle安装情况</p>

<pre><code>gem list --local
</code></pre>

<p>如果bundle update报找不到Gemfile，只要你切换到gemfile那个目录再运行bundle update即可。</p>
]]></content>
  </entry>
  
</feed>
